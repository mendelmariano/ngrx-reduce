{"ast":null,"code":"import { createEffect, ofType } from '@ngrx/effects';\nimport * as fromUsuariosActions from \"./usuarios.actions\";\nimport { of } from \"rxjs\";\nimport { exhaustMap, map, catchError } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@ngrx/effects\";\nimport * as i2 from \"src/app/Repository/Usuario.service\";\nexport let UsuariosEffects = /*#__PURE__*/(() => {\n  class UsuariosEffects {\n    constructor(actions$, usuariosService) {\n      this.actions$ = actions$;\n      this.usuariosService = usuariosService;\n      this.loadUsuarios$ = createEffect(() => this.actions$.pipe(ofType(\"[LOAD_USUARIOS] LOAD USUARIOS\"\n      /* LOAD_USUARIOS */\n      ), exhaustMap(() => this.usuariosService.getUsuarios().pipe(map(payLoad => fromUsuariosActions.LoadUsuariosSucess({\n        payLoad\n      }), catchError(error => of(fromUsuariosActions.LoadUsuariosFail({\n        error\n      }))))))));\n      this.loadUsuario$ = createEffect(() => this.actions$.pipe(ofType(\"[LOAD_USUARIO] LOAD USUARIO\"\n      /* LOAD_USUARIO */\n      ), exhaustMap(record => this.usuariosService.getUsuario(record.payload).pipe(map(payLoad => fromUsuariosActions.LoadUsuarioSucess({\n        payLoad\n      }), catchError(error => of(fromUsuariosActions.LoadUsuarioFail({\n        error\n      }))))))));\n      this.createUsuario$ = createEffect(() => this.actions$.pipe(ofType(\"[CREATE_USUARIO] CREATE USUARIO\"\n      /* CREATE_USUARIO */\n      ), exhaustMap(record => this.usuariosService.addUsuario(record.payload).pipe(map(payLoad => fromUsuariosActions.LoadUsuarioSucess({\n        payLoad\n      }), catchError(error => of(fromUsuariosActions.LoadUsuarioFail({\n        error\n      }))))))));\n      this.updateUsuario$ = createEffect(() => this.actions$.pipe(ofType(\"[UPDATE_USUARIO] UPDATE USUARIO\"\n      /* UPDATE_USUARIO */\n      ), exhaustMap(record => this.usuariosService.updateUsuario(record.payload).pipe(map(payLoad => fromUsuariosActions.LoadUsuarioSucess({\n        payLoad\n      }), catchError(error => of(fromUsuariosActions.LoadUsuarioFail({\n        error\n      }))))))));\n      this.deleteUsuario$ = createEffect(() => this.actions$.pipe(ofType(\"[DELETE_USUARIO] DELETE USUARIO\"\n      /* DELETE_USUARIO */\n      ), exhaustMap(record => this.usuariosService.deleteUsuario(record.payload).pipe(map(() => fromUsuariosActions.DeleteUsuarioSucess({\n        payLoad: record.payLoad\n      }), catchError(error => of(fromUsuariosActions.DeleteUsuarioFail({\n        error\n      }))))))));\n    }\n\n  }\n\n  UsuariosEffects.ɵfac = function UsuariosEffects_Factory(t) {\n    return new (t || UsuariosEffects)(i0.ɵɵinject(i1.Actions), i0.ɵɵinject(i2.UsuarioService));\n  };\n\n  UsuariosEffects.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: UsuariosEffects,\n    factory: UsuariosEffects.ɵfac\n  });\n  return UsuariosEffects;\n})();","map":null,"metadata":{},"sourceType":"module"}